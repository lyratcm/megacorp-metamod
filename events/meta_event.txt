namespace = meta


country_event = {
	id = meta.1
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		not = {
			has_global_flag = host_set_lyra
		}
		has_country_flag = is_lyra
		#temp disabled
		always = no
	}

	immediate = {
		set_country_flag = is_host
		save_global_event_target_as = host_set_lyra
		set_global_flag = host_set_lyra
	}
}

country_event = {
	id = meta.2
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		not = {
			has_country_flag = host_set_lyra
		}
		or = {
			has_ascension_perk = ap_the_flesh_is_weak
			has_ascension_perk = ap_synthetic_evolution
		}
	}

	immediate = {
		founder_species = {
			save_global_event_target_as = founder_species_@owner
		}
		if = {
			limit = {
				event_target:host_set_lyra = {
					any_owned_species = {
						prevprev = {
							any_owned_species = {
								is_same_species = prevprev
							}
						}
					}
				}
			}
			if = {
				limit = {
					has_ascension_perk = ap_synthetic_evolution
					
				}
				#has checks for already existing species
				owner_main_species = {
					create_species = {
						is_mod = yes
						name = this
						plural = this
						class = "ROBOT"
						portrait = "default_robot"
						traits = {
							trait = trait_mechanical
						}
						can_be_modified = this
						homeworld = this
						namelist = this
						gender = this
		
						effect = {
							set_synth_origin_traits_effect = yes
							set_synth_or_robot_portrait_effect = yes
							save_global_event_target_as = synthspecies@root.owner
							save_event_target_as = target_species
							owner = { change_dominant_species = { species = event_target:target_species } }
						}
					}
				}
			}
			if = {
				limit = {
					owner = {
						owner_main_species = {
							not = {
								has_trait = trait_cybernetic
							}
						}
					}
				}
				owner_main_species = {
					modify_species = {
						remove_trait = trait_latent_psionic
						remove_trait = trait_psionic
						effect = {
							create_species = {
								is_mod = yes
								name = this
								plural = this
								class = this
								portrait = this
								traits = this
								can_be_modified = this
								homeworld = this
								namelist = this
								gender = this
								traits = {
									ideal_planet_class = this
									trait = trait_cybernetic
								}
								effect = {
									save_event_target_as = target_species
									owner = { change_dominant_species = { species = event_target:target_species } }
								}
							}
							last_created_species = {
								save_global_event_target_as = cyberspecies@prev
							}
						}
					}
				}
			}
			random_owned_pop = {
				limit = {
					not = {
						pop_has_trait = trait_mechanical
					}
					
				}
				species = {
					save_global_event_target_as = target_species
				}
			}
			random_owned_species = {
				limit = {
					any_species_pop = {
						pop_has_trait = trait_mechanical
					}
				}
				save_global_event_target_as = target_species

			}
			owner = { change_dominant_species = { species = event_target:target_species } }
			event_target:host_set_lyra = {
				every_owned_species = {
					prevprev = {
						every_owned_species = {
							limit = {
								is_same_species = prevprev
							}
							save_event_target_as = assimilation
							owner = {
								every_planet_within_border = {
									if = {
										limit = {
											owner = {
												has_ascension_perk = ap_synthetic_evolution
											}
										}
										while = {
											count = trigger:num_pops
											random_owned_pop = {
												limit = {
													not = {
														has_trait = trait_mechanical
													}
													species = {
														is_same_species = event_target:assimilation
													}
												}
												kill_pop = yes
												planet = {
													create_pop = {
														species = event_target:synthspecies@root.owner
														ethos = owner
													}
												}
											}
										}
									}
									else_if = {
										limit = {
											owner = {
												has_ascension_perk = ap_the_flesh_is_weak
											}
										}
										while = {
											count = trigger:num_pops
											random_owned_pop = {
												limit = {
													not = {
														has_trait = trait_cybernetic
													}
													species = {
														is_same_species = event_target:assimilation
													}
												}
												kill_pop = yes
												planet = {
													create_pop = {
														species = owner_main_species
														ethos = owner
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

#delay by 1 day to allow a 29 day modifier that is around at start of mont but not for the event
country_event = {
	id = meta.3
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		country_event = { id = meta.31 days = 2 }
	}
}

country_event = {
	id = meta.31
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		set_variable = { which = meta_empire_size_pops_mult_var value = modifier:empire_size_pops_mult }
		change_variable = {
			which = meta_empire_size_pops_mult_var
			value = 0.85
		}
		if = {
			limit = {
				check_variable = { which = meta_empire_size_pops_mult_var value < 0 }
			}
			add_modifier = { modifier = meta_empire_size_pops_mult mult = meta_empire_size_pops_mult_var days = 29 }
		}
	}
}

country_event = {
	id = meta.6
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		years_passed = 1
		has_origin = origin_spectrals_cluster
	}

	immediate = {
		save_event_target_as = rl_digsite_finder
		if = {
			limit = {
				any_planet_within_border = {
					solar_system = {
						NOR = {
							is_capital_system = yes
						}
					}
					is_planet_class = pc_broken
				}
			}
			random_planet_within_border = {
				limit = {
					solar_system = {
						NOR = {
							is_capital_system = yes
						}
					}
					is_planet_class = pc_broken
				}
				ehof_giga_new_create_rl_digsite = {
					digsite = ehof_precursor
					digsite_flag = ehof_precursor
					digsite_completion_flag = ehof_chain_begins_complete
				}
				root = {
					set_country_flag = ehof_precursor_spawned
					if = {
						limit = {
							is_ai = yes
						}
						random_country = {
							limit = {
								is_country_type = global_event
							}
							change_variable = {
								which = chk_precursor_cap
								value = 1
							}
						}
					}
				}
			}
		}
	}
}